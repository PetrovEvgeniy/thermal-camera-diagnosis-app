[
    {
        "id": "c41a721297a51c5d",
        "type": "tab",
        "label": "Data Collector",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "66f50843557c7f1f",
        "type": "tab",
        "label": "Anomaly Detection Simulator",
        "disabled": true,
        "info": "Deep learning approach, taking into account raw thermal images",
        "env": []
    },
    {
        "id": "a9c10a911df5cb3d",
        "type": "tab",
        "label": "EKettle Anomaly Detection",
        "disabled": false,
        "info": "Deep learning approach, taking into account raw thermal images",
        "env": []
    },
    {
        "id": "596cc083aa0a99bd",
        "type": "ctrlx-config",
        "name": "basic",
        "hostname": "localhost",
        "debug": false
    },
    {
        "id": "8619591cd4eb4f68",
        "type": "ctrlx-config-subscription",
        "device": "2d048973e79c33c6",
        "name": "default_sub",
        "publishIntervalMs": ""
    },
    {
        "id": "2d048973e79c33c6",
        "type": "ctrlx-config",
        "name": "test1",
        "hostname": "localhost",
        "debug": false
    },
    {
        "id": "ed5b8ac4bcbf7c01",
        "type": "modbustcp-server",
        "name": "FlirAX8",
        "host": "192.168.1.50",
        "port": "502",
        "unit_id": "109",
        "reconnecttimeout": "10"
    },
    {
        "id": "cab0227b8b79ab39",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5a48b31179b605fb",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "2f08f2424e81e171",
        "type": "ui_group",
        "name": "Default",
        "tab": "cab0227b8b79ab39",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e72067fdfec87118",
        "type": "ui_group",
        "name": "Developer Exchange",
        "tab": "c97156417c0b4d4d",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3199d280f77c7260",
        "type": "ui_group",
        "name": "Control Buttons",
        "tab": "c97156417c0b4d4d",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "45573f38d5c07244",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "c97156417c0b4d4d",
        "type": "ui_tab",
        "name": "Dev Exchange",
        "icon": "fa-exchange",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c13ab4edeb51aac8",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "26544b6517e77460",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "52c44128ec9bb026",
        "type": "inject",
        "z": "c41a721297a51c5d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "2c539a80bee3bb27",
                "e8e38283608fc4e8"
            ]
        ]
    },
    {
        "id": "f7d2e2dc127ab7f4",
        "type": "http request",
        "z": "c41a721297a51c5d",
        "name": "CAMERA 1: GET current raw thermal image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://192.168.1.50/api/image/current?imgformat=JPEG",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 320,
        "wires": [
            [
                "f87d7868acb0488b"
            ]
        ]
    },
    {
        "id": "c49aca16da3c0c56",
        "type": "inject",
        "z": "c41a721297a51c5d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "2fbd031d75f64614",
                "c4d2622f38b2e6d8",
                "cc582a7b105c950a",
                "268949779405b2f4",
                "2c8a81a62d338e01"
            ]
        ]
    },
    {
        "id": "92dd6f68e5f6ae44",
        "type": "comment",
        "z": "c41a721297a51c5d",
        "name": "Setup constants",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "f87d7868acb0488b",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "Set up output information",
        "func": "const fileRawData = msg.payload;\nconst now = new Date();\n\nconst year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2,'0');\nconst day = String(now.getDate()).padStart(2,'0');\nconst hours = String(now.getHours()).padStart(2,'0');\nconst minutes = String(now.getMinutes()).padStart(2,'0');\nconst seconds = String(now.getSeconds()).padStart(2,'0');\n\nconst formattedDate = `${year}${month}${day}_${hours}${minutes}${seconds}`;\n\nlet fileName = `${flow.get(\"tThresholdExceeded\")==true ? \"a_\" : \"\" }` + formattedDate  + \"_e_kettle\" + \".png\";\n\nmsg.fullPath = flow.get(\"OUTPUT_DIR_IMAGES\") + \"/\" + fileName;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "6287df3c506eeacc"
            ]
        ]
    },
    {
        "id": "6287df3c506eeacc",
        "type": "file",
        "z": "c41a721297a51c5d",
        "name": "",
        "filename": "fullPath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1380,
        "y": 320,
        "wires": [
            [
                "ebae9281fb071d2c"
            ]
        ]
    },
    {
        "id": "ebae9281fb071d2c",
        "type": "debug",
        "z": "c41a721297a51c5d",
        "d": true,
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 320,
        "wires": []
    },
    {
        "id": "2c539a80bee3bb27",
        "type": "http request",
        "z": "c41a721297a51c5d",
        "d": true,
        "name": "CAMERA 2: GET current raw thermal image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://192.168.XXX.XXX/api/image/current?imgformat=FFF",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 380,
        "wires": [
            [
                "e38c4e4c4005375e"
            ]
        ]
    },
    {
        "id": "e38c4e4c4005375e",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "Set up output information",
        "func": "const fileRawData = msg.payload;\nconst now = new Date();\n\nconst year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2, '0');\nconst day = String(now.getDate()).padStart(2, '0');\nconst hours = String(now.getHours()).padStart(2, '0');\nconst minutes = String(now.getMinutes()).padStart(2, '0');\nconst seconds = String(now.getSeconds()).padStart(2, '0');\n\nconst formattedDate = `${year}${month}${day}_${hours}${minutes}${seconds}`;\n\nconst fileName = formattedDate + \"cam2\" + \".fff\";\n\nmsg.fullPath = flow.get(\"OUTPUT_DIR_IMAGES\") + \"/\" + fileName;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 380,
        "wires": [
            [
                "9525f80ff050d653"
            ]
        ]
    },
    {
        "id": "9525f80ff050d653",
        "type": "file",
        "z": "c41a721297a51c5d",
        "name": "",
        "filename": "fullPath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1380,
        "y": 380,
        "wires": [
            [
                "ebae9281fb071d2c"
            ]
        ]
    },
    {
        "id": "d87e4f6890fb3362",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isCollectingData",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 140,
        "wires": [
            [
                "351226da784617d0"
            ]
        ]
    },
    {
        "id": "83ae25270fe093c0",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isCollectingData",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 180,
        "wires": [
            [
                "1add894f81fa0ee0"
            ]
        ]
    },
    {
        "id": "351226da784617d0",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Discharging process activated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1620,
        "y": 140,
        "wires": [
            [
                "82afadfa3f44fee9"
            ]
        ]
    },
    {
        "id": "1add894f81fa0ee0",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Discharging process deactivated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1620,
        "y": 180,
        "wires": [
            [
                "82afadfa3f44fee9"
            ]
        ]
    },
    {
        "id": "82afadfa3f44fee9",
        "type": "debug",
        "z": "c41a721297a51c5d",
        "d": true,
        "name": "debug 2",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 160,
        "wires": []
    },
    {
        "id": "e8e38283608fc4e8",
        "type": "switch",
        "z": "c41a721297a51c5d",
        "name": "Check if the data collection is activated",
        "property": "isCollectingData",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "f7d2e2dc127ab7f4",
                "2c539a80bee3bb27"
            ]
        ]
    },
    {
        "id": "2fbd031d75f64614",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isCollectingData",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "28face7fdcd96530",
        "type": "switch",
        "z": "c41a721297a51c5d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0.5",
                "vt": "str"
            },
            {
                "t": "lte",
                "v": "0.5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 160,
        "wires": [
            [
                "d87e4f6890fb3362"
            ],
            [
                "83ae25270fe093c0"
            ]
        ]
    },
    {
        "id": "677e942a2b43cf96",
        "type": "modbustcp-read",
        "z": "c41a721297a51c5d",
        "name": "",
        "topic": "max-temperature/box1",
        "dataType": "HoldingRegister",
        "adr": "4141",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "server": "ed5b8ac4bcbf7c01",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 230,
        "y": 820,
        "wires": [
            [
                "5fa1664472b1cb29"
            ]
        ]
    },
    {
        "id": "5fa1664472b1cb29",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "Format data output",
        "func": "let maxTempCelsius = msg.payload[0] - 273.15;\nlet maxTempCelsiusFormatted = `${maxTempCelsius.toFixed(2)}`;\n\nmsg.payload = maxTempCelsiusFormatted;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 820,
        "wires": [
            [
                "58545ac08effd0fc",
                "edce15637b815fc2",
                "9b587c0da44620c9"
            ]
        ]
    },
    {
        "id": "49217f8ba1209926",
        "type": "modbustcp-read",
        "z": "c41a721297a51c5d",
        "name": "",
        "topic": "max-temperature/box2",
        "dataType": "HoldingRegister",
        "adr": "8141",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "server": "ed5b8ac4bcbf7c01",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 230,
        "y": 880,
        "wires": [
            [
                "5b9ae21ca38b92c2"
            ]
        ]
    },
    {
        "id": "5b9ae21ca38b92c2",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "Format data output",
        "func": "let maxTempCelsius = msg.payload[0] - 273.15;\nlet maxTempCelsiusFormatted = `${maxTempCelsius.toFixed(2)}`;\n\nmsg.payload = maxTempCelsiusFormatted;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "7792d99536fb2486",
                "edce15637b815fc2"
            ]
        ]
    },
    {
        "id": "58545ac08effd0fc",
        "type": "ui_chart",
        "z": "c41a721297a51c5d",
        "name": "Time serries",
        "group": "2f08f2424e81e171",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Box 1 Max Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading...",
        "dot": false,
        "ymin": "20",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "7792d99536fb2486",
        "type": "ui_chart",
        "z": "c41a721297a51c5d",
        "name": "Time serries",
        "group": "2f08f2424e81e171",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Box 2 Max temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading...",
        "dot": false,
        "ymin": "20",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "edce15637b815fc2",
        "type": "join",
        "z": "c41a721297a51c5d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 810,
        "y": 860,
        "wires": [
            [
                "e1f27ec891867a00"
            ]
        ]
    },
    {
        "id": "629e59bba5d5c3d5",
        "type": "csv",
        "z": "c41a721297a51c5d",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp, box1, box2",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1710,
        "y": 860,
        "wires": [
            [
                "d09600f265b2de45"
            ]
        ]
    },
    {
        "id": "e1f27ec891867a00",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload[\"timestamp\"]",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload[\"box1\"]",
                "pt": "msg",
                "to": "payload[\"max-temperature/box1\"]",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload[\"box2\"]",
                "pt": "msg",
                "to": "payload[\"max-temperature/box2\"]",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "max-temperatures",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 860,
        "wires": [
            [
                "01d1a70d523cdb5a"
            ]
        ]
    },
    {
        "id": "896e4f6ed3dd6a85",
        "type": "ui_switch",
        "z": "c41a721297a51c5d",
        "name": "",
        "label": "Collect Data",
        "tooltip": "Collect raw thermal image data",
        "group": "2f08f2424e81e171",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1030,
        "y": 160,
        "wires": [
            [
                "28face7fdcd96530",
                "3e546265323b9524",
                "e9a738316f536f30"
            ]
        ]
    },
    {
        "id": "01d1a70d523cdb5a",
        "type": "rbe",
        "z": "c41a721297a51c5d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload[\"timestamp\"]",
        "topi": "topic",
        "x": 1190,
        "y": 860,
        "wires": [
            [
                "474a834771705d43"
            ]
        ]
    },
    {
        "id": "474a834771705d43",
        "type": "switch",
        "z": "c41a721297a51c5d",
        "name": "Check if the data collection is activated",
        "property": "isCollectingData",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1430,
        "y": 860,
        "wires": [
            [
                "629e59bba5d5c3d5"
            ]
        ]
    },
    {
        "id": "d09600f265b2de45",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "Set up output information",
        "func": "const fileRawData = msg.payload;\n\nmsg.fullPath = flow.get(\"LAST_CSV_FILE_PATH\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 860,
        "wires": [
            [
                "e1c79252df1c1e85"
            ]
        ]
    },
    {
        "id": "e1c79252df1c1e85",
        "type": "file",
        "z": "c41a721297a51c5d",
        "name": "",
        "filename": "fullPath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2120,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "c4d2622f38b2e6d8",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "LAST_CSV_FILE_PATH",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5c45300bb633c21a",
        "type": "fs-ops-dir",
        "z": "c41a721297a51c5d",
        "name": "Get Directory Content",
        "path": "OUTPUT_DIR_CSV",
        "pathType": "flow",
        "filter": "",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 1900,
        "y": 40,
        "wires": [
            [
                "168933db4b8ef631"
            ]
        ]
    },
    {
        "id": "168933db4b8ef631",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "Check if the last csv file is known and set it",
        "func": "const now = new Date();\n\nconst year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2, '0');\nconst day = String(now.getDate()).padStart(2, '0');\nconst hours = String(now.getHours()).padStart(2, '0');\nconst minutes = String(now.getMinutes()).padStart(2, '0');\nconst seconds = String(now.getSeconds()).padStart(2, '0');\n\nconst formattedDate = `${year}${month}${day}_${hours}${minutes}${seconds}`;\n\nconst fileName = \"CAMERA_1\" + \".csv\";\n\n\nif (msg.files.length == 0){\n    msg.fullPath = flow.get(\"OUTPUT_DIR_CSV\") + \"/\" + formattedDate + fileName;\n    flow.set(\"LAST_CSV_FILE_PATH\", msg.fullPath)\n}\n\nif (msg.files.length > 0){\n    // Export capacity exceeded\n    msg.fullPath = flow.get(\"OUTPUT_DIR_CSV\") + \"/\" + formattedDate + fileName;\n    flow.set(\"LAST_CSV_FILE_PATH\", msg.fullPath)\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3ef56da267b545af",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "set outputDirectory CSV",
        "func": "node.log(env.get(\"SNAP_COMMON\"));\n\nlet outputDir = flow.get(\"OUTPUT_DIR\")\n\nflow.set(\"OUTPUT_DIR_CSV\", outputDir + \"records\")\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4390269004d51603",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "set outputDirectory Images",
        "func": "let outputDir = flow.get(\"OUTPUT_DIR\")\n\nflow.set(\"OUTPUT_DIR_IMAGES\", outputDir + \"images\")\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ee40b69dd334f65f",
        "type": "exec",
        "z": "c41a721297a51c5d",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Create records directory if it doesn't exist",
        "x": 1560,
        "y": 40,
        "wires": [
            [
                "5c45300bb633c21a"
            ],
            [],
            []
        ]
    },
    {
        "id": "3e546265323b9524",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "Configure exec command",
        "func": "let recordsDir = flow.get(\"OUTPUT_DIR_CSV\");\n\nmsg.payload = `test -d ${recordsDir} || mkdir -p ${recordsDir}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 40,
        "wires": [
            [
                "ee40b69dd334f65f"
            ]
        ]
    },
    {
        "id": "cc582a7b105c950a",
        "type": "function",
        "z": "c41a721297a51c5d",
        "name": "set outputDirectory",
        "func": "node.log(env.get(\"SNAP_COMMON\"));\n\n//TODO: ADD DATE directory\n\nlet outputDir = env.get(\"SNAP_COMMON\") + \"/solutions/activeConfiguration/thermal-camera-diagnosis-app/\"\n\nflow.set(\"OUTPUT_DIR\", outputDir);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "4390269004d51603",
                "3ef56da267b545af"
            ]
        ]
    },
    {
        "id": "268949779405b2f4",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tThreshold",
                "pt": "flow",
                "to": "85",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "2c8a81a62d338e01",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tThresholdExceeded",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9b587c0da44620c9",
        "type": "switch",
        "z": "c41a721297a51c5d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "tThreshold",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 800,
        "wires": [
            [
                "3ad4e274ac36a5bf"
            ]
        ]
    },
    {
        "id": "76c3b7b6520fc1b4",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tThresholdExceeded",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "3ad4e274ac36a5bf",
        "type": "switch",
        "z": "c41a721297a51c5d",
        "name": "",
        "property": "tThresholdExceeded",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "76c3b7b6520fc1b4"
            ]
        ]
    },
    {
        "id": "e9a738316f536f30",
        "type": "change",
        "z": "c41a721297a51c5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tThresholdExceeded",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bd5ddb5c98f71afc",
        "type": "python-function",
        "z": "66f50843557c7f1f",
        "name": "",
        "func": "import sys\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/config/python-code/')\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/config/python-code/masks')\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/usr/lib/python3/dist-packages/')\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/usr/lib/')\n\nimport base64\nimport cv2\nimport time\nimport flir_image_extractor\nimport numpy as np\n\nfrom anomalib.deploy import TorchInferencer\n\ntorch_model_path = os.environ[\"SNAP\"] + \"/config/models/semi-supervised-ad/battery_discharging/weights/torch/model.pt\"\nmetadata_path = os.environ[\"SNAP\"] + \"/config/models/semi-supervised-ad/battery_discharging/weights/torch/metadata.json\"\n\ninferencer = TorchInferencer(\n    path=torch_model_path,\n    device=\"cpu\",\n)\n\nimagePath = msg[\"fullPath\"]\n\nfir = flir_image_extractor.FlirImageExtractor()\n\nfir.process_image(imagePath)\n#img_raw = fir.get_thermal_image_cv()  # Get the thermal image in normalized np format\nimg_raw_np = fir.get_thermal_np_normalized()\nimg_raw_np = img_raw_np[:, :, :3]  # Keep only the first 3 channels (RGB)\n\n\n# Convert BGR to RGB since OpenCV loads images in BGR format by default\nimg_rgb = cv2.cvtColor(img_raw_np, cv2.COLOR_BGR2RGB)\n\n# Convert the ndarray to a byte array\n_, img_encoded = cv2.imencode('.jpg', img_rgb)  # Use img_rgb here\nimg_bytes = img_encoded.tobytes()\n\n# Encode the byte array to base64\nimg_base64 = base64.b64encode(img_bytes).decode('utf-8')\n\n# Add the base64 string to the message\nmsg[\"img_raw_b64\"] = img_base64\n\n#msg[\"img_raw\"] = img_raw_np\n\nif img_raw_np is not None:\n    # Perform inference\n    \n    # Assuming the image needs to be in the format required by the model\n    predictions = inferencer.predict(image=img_raw_np)\n\n    if predictions.pred_score > 0.90:\n        msg[\"result\"] = f'Anomaly! Pred. Score: {predictions.pred_score:.2f}'\n        msg[\"anomaly\"] = True\n    else:\n        msg[\"result\"] = f'Normal. Pred. Score: {predictions.pred_score:.2f}'\n        msg[\"anomaly\"] = False\n\nreturn msg",
        "outputs": 1,
        "x": 260,
        "y": 740,
        "wires": [
            [
                "1d623fbd5e740d92",
                "ab82fd63542fd2f1",
                "ea4adf5bd9ac3418"
            ]
        ]
    },
    {
        "id": "1d623fbd5e740d92",
        "type": "image",
        "z": "66f50843557c7f1f",
        "name": "Prossesed image preview",
        "width": "160",
        "data": "img_raw_b64",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1130,
        "y": 820,
        "wires": []
    },
    {
        "id": "5967064e661eae73",
        "type": "inject",
        "z": "66f50843557c7f1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "bdd390be81749158"
            ]
        ]
    },
    {
        "id": "b7e355151571e53c",
        "type": "http request",
        "z": "66f50843557c7f1f",
        "name": "CAMERA 1: GET current raw thermal image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "https://127.0.0.1:8443/tss/camera1",
        "tls": "c13ab4edeb51aac8",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 440,
        "wires": [
            [
                "8a61df551dd32b56",
                "5be5ab0cbed8f2f9"
            ]
        ]
    },
    {
        "id": "8a61df551dd32b56",
        "type": "function",
        "z": "66f50843557c7f1f",
        "name": "Set up output information",
        "func": "const fileRawData = msg.payload;\n\nconst fileName = \"DS1_CAM1.png\";\n\nmsg.fullPath = flow.get(\"OUTPUT_DIR_RUN\") + \"/\" + fileName;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "d09a4601917e2421"
            ]
        ]
    },
    {
        "id": "450e2fa150739703",
        "type": "file",
        "z": "66f50843557c7f1f",
        "name": "",
        "filename": "fullPath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1400,
        "y": 440,
        "wires": [
            [
                "9afef509215b1f10",
                "e5a40d2f07aaacc1",
                "132d368c08045e14"
            ]
        ]
    },
    {
        "id": "0ffcc0ea3c9e6f35",
        "type": "http request",
        "z": "66f50843557c7f1f",
        "name": "CAMERA 2: GET current raw thermal image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "https://127.0.0.1:8443/tss/camera2",
        "tls": "26544b6517e77460",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 500,
        "wires": [
            [
                "8d439e14fd97eb1e",
                "5286a82637e27d1d"
            ]
        ]
    },
    {
        "id": "8d439e14fd97eb1e",
        "type": "function",
        "z": "66f50843557c7f1f",
        "name": "Set up output information",
        "func": "const fileRawData = msg.payload;\n\nconst fileName = \"DS1_CAM2.png\";\n\nmsg.fullPath = flow.get(\"OUTPUT_DIR_RUN\") + \"/\" + fileName;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 500,
        "wires": [
            [
                "89ba8cfda128df38"
            ]
        ]
    },
    {
        "id": "75acd92bed1fe759",
        "type": "file",
        "z": "66f50843557c7f1f",
        "name": "",
        "filename": "fullPath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1400,
        "y": 500,
        "wires": [
            [
                "9afef509215b1f10",
                "e5a40d2f07aaacc1"
            ]
        ]
    },
    {
        "id": "bdd390be81749158",
        "type": "switch",
        "z": "66f50843557c7f1f",
        "name": "Check if the anomaly detection is activated",
        "property": "isDetectingAnomalies",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 480,
        "wires": [
            [
                "b7e355151571e53c",
                "0ffcc0ea3c9e6f35"
            ]
        ]
    },
    {
        "id": "549a64b9dcd371cf",
        "type": "inject",
        "z": "66f50843557c7f1f",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "c363269bdb7adacd",
                "94a216af2edf8f52",
                "714442fad7d3f006",
                "5bfd6b0ab3d6725a"
            ]
        ]
    },
    {
        "id": "dd697c693785b06a",
        "type": "comment",
        "z": "66f50843557c7f1f",
        "name": "Setup constants",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "36c568ee81013273",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isDetectingAnomalies",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 80,
        "wires": [
            [
                "33471a3627e6c03d"
            ]
        ]
    },
    {
        "id": "afe6a97ab6ca1291",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isDetectingAnomalies",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 120,
        "wires": [
            [
                "5829776b9ce3203b"
            ]
        ]
    },
    {
        "id": "33471a3627e6c03d",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Anomaly Detection activated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 80,
        "wires": [
            [
                "e6928b2e54525ad7"
            ]
        ]
    },
    {
        "id": "5829776b9ce3203b",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Anomaly Detection deactivated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 120,
        "wires": [
            [
                "e6928b2e54525ad7"
            ]
        ]
    },
    {
        "id": "e6928b2e54525ad7",
        "type": "debug",
        "z": "66f50843557c7f1f",
        "d": true,
        "name": "debug 6",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 100,
        "wires": []
    },
    {
        "id": "75fc5eb1d4c954ec",
        "type": "switch",
        "z": "66f50843557c7f1f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0.5",
                "vt": "str"
            },
            {
                "t": "lte",
                "v": "0.5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1260,
        "y": 100,
        "wires": [
            [
                "36c568ee81013273"
            ],
            [
                "afe6a97ab6ca1291"
            ]
        ]
    },
    {
        "id": "958e7db67e0323ea",
        "type": "ui_switch",
        "z": "66f50843557c7f1f",
        "name": "",
        "label": "Anomaly Detection",
        "tooltip": "Collect raw thermal image data",
        "group": "2f08f2424e81e171",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1100,
        "y": 100,
        "wires": [
            [
                "75fc5eb1d4c954ec"
            ]
        ]
    },
    {
        "id": "5227fe5720df2382",
        "type": "function",
        "z": "66f50843557c7f1f",
        "name": "set outputDirectory Runtime Images",
        "func": "let outputDir = flow.get(\"OUTPUT_DIR\")\n\nflow.set(\"OUTPUT_DIR_RUN\", outputDir + \"runtime\")\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "94a216af2edf8f52",
        "type": "function",
        "z": "66f50843557c7f1f",
        "name": "set outputDirectory",
        "func": "\n\nlet outputDir = env.get(\"SNAP_COMMON\") + \"/solutions/activeConfiguration/thermal-camera-diagnosis-app/\"\n\nflow.set(\"OUTPUT_DIR\", outputDir);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "5227fe5720df2382"
            ]
        ]
    },
    {
        "id": "c363269bdb7adacd",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isDetectingAnomalies",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9ca6887f404d8297",
        "type": "link in",
        "z": "66f50843557c7f1f",
        "name": "link in 1",
        "links": [
            "e5a40d2f07aaacc1"
        ],
        "x": 55,
        "y": 740,
        "wires": [
            [
                "bd5ddb5c98f71afc"
            ]
        ]
    },
    {
        "id": "9afef509215b1f10",
        "type": "debug",
        "z": "66f50843557c7f1f",
        "d": true,
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 540,
        "wires": []
    },
    {
        "id": "336e5f93c1826208",
        "type": "modbustcp-read",
        "z": "66f50843557c7f1f",
        "d": true,
        "name": "",
        "topic": "max-temperature/box1",
        "dataType": "HoldingRegister",
        "adr": "4141",
        "quantity": "2",
        "rate": "0.5",
        "rateUnit": "s",
        "server": "ed5b8ac4bcbf7c01",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "013657865f48d0f0"
            ]
        ]
    },
    {
        "id": "013657865f48d0f0",
        "type": "function",
        "z": "66f50843557c7f1f",
        "name": "Format data output",
        "func": "let maxTempCelsius = msg.payload[0] - 273.15;\nlet maxTempCelsiusFormatted = `${maxTempCelsius.toFixed(2)}`;\n\nmsg.payload = maxTempCelsiusFormatted;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1060,
        "wires": [
            [
                "b75eab06dc333843",
                "fab5dd1c0fa76307"
            ]
        ]
    },
    {
        "id": "972a82e792044844",
        "type": "modbustcp-read",
        "z": "66f50843557c7f1f",
        "d": true,
        "name": "",
        "topic": "max-temperature/box2",
        "dataType": "HoldingRegister",
        "adr": "8141",
        "quantity": "2",
        "rate": "0.5",
        "rateUnit": "s",
        "server": "ed5b8ac4bcbf7c01",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "0e5f785b87fc9322"
            ]
        ]
    },
    {
        "id": "0e5f785b87fc9322",
        "type": "function",
        "z": "66f50843557c7f1f",
        "name": "Format data output",
        "func": "let maxTempCelsius = msg.payload[0] - 273.15;\nlet maxTempCelsiusFormatted = `${maxTempCelsius.toFixed(2)}`;\n\nmsg.payload = maxTempCelsiusFormatted;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "68061e09e354adaa",
                "fab5dd1c0fa76307"
            ]
        ]
    },
    {
        "id": "b75eab06dc333843",
        "type": "ui_chart",
        "z": "66f50843557c7f1f",
        "name": "Time serries",
        "group": "2f08f2424e81e171",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Box 1 Max Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading...",
        "dot": false,
        "ymin": "20",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 590,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "68061e09e354adaa",
        "type": "ui_chart",
        "z": "66f50843557c7f1f",
        "name": "Time serries",
        "group": "2f08f2424e81e171",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Box 2 Max temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading...",
        "dot": false,
        "ymin": "20",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 590,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "fab5dd1c0fa76307",
        "type": "join",
        "z": "66f50843557c7f1f",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 690,
        "y": 1100,
        "wires": [
            [
                "e83161e910d13364"
            ]
        ]
    },
    {
        "id": "e83161e910d13364",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload[\"timestamp\"]",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload[\"box1\"]",
                "pt": "msg",
                "to": "payload[\"max-temperature/box1\"]",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload[\"box2\"]",
                "pt": "msg",
                "to": "payload[\"max-temperature/box2\"]",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "max-temperatures",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1100,
        "wires": [
            [
                "f51b34572846d445"
            ]
        ]
    },
    {
        "id": "f51b34572846d445",
        "type": "rbe",
        "z": "66f50843557c7f1f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload[\"timestamp\"]",
        "topi": "topic",
        "x": 1070,
        "y": 1100,
        "wires": [
            [
                "58237152f3714195"
            ]
        ]
    },
    {
        "id": "58237152f3714195",
        "type": "switch",
        "z": "66f50843557c7f1f",
        "name": "Check if the anomaly detection is activated",
        "property": "isDetectingAnomalies",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1370,
        "y": 1100,
        "wires": [
            [
                "cd5f8e834a509a39"
            ]
        ]
    },
    {
        "id": "714442fad7d3f006",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "box1Threshold",
                "pt": "flow",
                "to": "80",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "5bfd6b0ab3d6725a",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "box2Threshold",
                "pt": "flow",
                "to": "80",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "cd5f8e834a509a39",
        "type": "function",
        "z": "66f50843557c7f1f",
        "name": "function 2",
        "func": "const maxTempB1 = parseFloat(msg.payload[\"box1\"]);\nconst maxTempB2 = parseFloat(msg.payload[\"box2\"]);\n\nlet result = \"\";\n\nif (maxTempB1 > flow.get(\"box1Threshold\")){\n    result += \"Box 1 - Threshold temperature was exceeded!\\n\"\n}\n\nif (maxTempB2 > flow.get(\"box2Threshold\")){\n    result += \"Box 2 - Threshold temperature was exceeded!\\n\"\n}\n\nmsg.result = result\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1100,
        "wires": [
            [
                "dd3edb5e8f90dca5"
            ]
        ]
    },
    {
        "id": "7d987c360968e025",
        "type": "debug",
        "z": "66f50843557c7f1f",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ab82fd63542fd2f1",
        "type": "debug",
        "z": "66f50843557c7f1f",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 840,
        "wires": []
    },
    {
        "id": "dd3edb5e8f90dca5",
        "type": "switch",
        "z": "66f50843557c7f1f",
        "name": "",
        "property": "result.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1830,
        "y": 1100,
        "wires": [
            [
                "7d987c360968e025"
            ]
        ]
    },
    {
        "id": "ee2b24bd34aa7817",
        "type": "ui_toast",
        "z": "66f50843557c7f1f",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 870,
        "y": 740,
        "wires": []
    },
    {
        "id": "ea4adf5bd9ac3418",
        "type": "switch",
        "z": "66f50843557c7f1f",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Anomaly",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 740,
        "wires": [
            [
                "c3acff4fd7987cf8"
            ]
        ]
    },
    {
        "id": "c3acff4fd7987cf8",
        "type": "change",
        "z": "66f50843557c7f1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "result",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "ee2b24bd34aa7817"
            ]
        ]
    },
    {
        "id": "5286a82637e27d1d",
        "type": "image",
        "z": "66f50843557c7f1f",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1100,
        "y": 560,
        "wires": []
    },
    {
        "id": "5be5ab0cbed8f2f9",
        "type": "image",
        "z": "66f50843557c7f1f",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1100,
        "y": 240,
        "wires": []
    },
    {
        "id": "7e5aaa1997f3568e",
        "type": "comment",
        "z": "66f50843557c7f1f",
        "name": "Discharging Line 1 - Preprocessing and Inference",
        "info": "",
        "x": 250,
        "y": 680,
        "wires": []
    },
    {
        "id": "a2291cdd10f594be",
        "type": "comment",
        "z": "66f50843557c7f1f",
        "name": "Discharging Line 1 - Thermal Image Fetching",
        "info": "",
        "x": 210,
        "y": 400,
        "wires": []
    },
    {
        "id": "e5a40d2f07aaacc1",
        "type": "link out",
        "z": "66f50843557c7f1f",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "651b891c1ffa3b56",
            "9ca6887f404d8297"
        ],
        "x": 1665,
        "y": 440,
        "wires": []
    },
    {
        "id": "6130f1454e4471e3",
        "type": "comment",
        "z": "66f50843557c7f1f",
        "name": "Discharging Line 1 - Time Serries Data Streaming",
        "info": "",
        "x": 230,
        "y": 1000,
        "wires": []
    },
    {
        "id": "132d368c08045e14",
        "type": "debug",
        "z": "66f50843557c7f1f",
        "d": true,
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 380,
        "wires": []
    },
    {
        "id": "27087bea3267d149",
        "type": "catch",
        "z": "66f50843557c7f1f",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 640,
        "y": 600,
        "wires": [
            [
                "b117602fb675696a"
            ]
        ]
    },
    {
        "id": "b117602fb675696a",
        "type": "debug",
        "z": "66f50843557c7f1f",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 600,
        "wires": []
    },
    {
        "id": "d09a4601917e2421",
        "type": "switch",
        "z": "66f50843557c7f1f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "buffer",
                "vt": "buffer"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 440,
        "wires": [
            [
                "450e2fa150739703"
            ]
        ]
    },
    {
        "id": "89ba8cfda128df38",
        "type": "switch",
        "z": "66f50843557c7f1f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "buffer",
                "vt": "buffer"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 500,
        "wires": [
            [
                "75acd92bed1fe759"
            ]
        ]
    },
    {
        "id": "3287fa6eea13ba89",
        "type": "python-function",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "func": "import sys\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/config/python-code/')\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/config/python-code/masks')\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/usr/lib/python3/dist-packages/')\nsys.path.append('/snap/thermal-camera-diagnosis-app/x1/usr/lib/')\n\nimport base64\nimport cv2\nimport time\nimport flir_image_extractor\nimport numpy as np\n\nfrom anomalib.deploy import TorchInferencer\n\ntorch_model_path = os.environ[\"SNAP\"] + \"/config/models/semi-supervised-ad/electric_kettle/padim/eKettleT/weights/torch/model.pt\"\n\ninferencer = TorchInferencer(\n    path=torch_model_path,\n    device=\"cpu\",\n)\n\nimagePath = msg[\"fullPath\"]\n\nfir = flir_image_extractor.FlirImageExtractor()\nfir.process_image(imagePath)\n\n# Extract the normalized thermal image\nimg_raw_np = fir.get_thermal_np_normalized()\n\nif img_raw_np is not None:\n    # Keep only the first 3 channels (RGB)\n    img_raw_np = img_raw_np[:, :, :3]\n\n    # Convert BGR to RGB since OpenCV loads images in BGR format by default\n    #img_rgb = cv2.cvtColor(img_raw_np, cv2.COLOR_BGR2RGB)\n\n    # Convert the ndarray to a byte array\n   # _, img_encoded = cv2.imencode('.jpg', img_rgb)\n   # img_bytes = img_encoded.tobytes()\n\n    # Encode the byte array to base64\n   # img_base64 = base64.b64encode(img_bytes).decode('utf-8')\n\n    # Add the base64 string to the message\n    #msg[\"img_raw_b64\"] = img_base64\n\n    # Perform inference\n    predictions = inferencer.predict(image=img_raw_np)\n\n    if predictions.pred_score > 0.55:\n        msg[\"result\"] = f'Anomaly! Pred. Score: {predictions.pred_score:.2f}'\n        msg[\"anomaly\"] = True\n    else:\n        msg[\"result\"] = f'Normal. Pred. Score: {predictions.pred_score:.2f}'\n        msg[\"anomaly\"] = False\nelse:\n    msg[\"result\"] = \"Error: Could not process the thermal image.\"\n    msg[\"anomaly\"] = False\n\nreturn msg\n",
        "outputs": 1,
        "x": 500,
        "y": 580,
        "wires": [
            [
                "a2f2d0f51fed570e",
                "ce859409a072d61e",
                "706599be23795f70"
            ]
        ]
    },
    {
        "id": "a2f2d0f51fed570e",
        "type": "image",
        "z": "a9c10a911df5cb3d",
        "d": true,
        "name": "Prossesed image preview",
        "width": "320",
        "data": "img_raw_b64",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 910,
        "y": 480,
        "wires": []
    },
    {
        "id": "5b1afb5d08a7e6e7",
        "type": "inject",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3.26",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "fc9e90afbe55f401",
                "c81573f8c9aad079"
            ]
        ]
    },
    {
        "id": "0bd9dbb5f2cb9d9c",
        "type": "http request",
        "z": "a9c10a911df5cb3d",
        "name": "CAMERA 1: GET current raw thermal image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://192.168.1.50/api/image/current?imgformat=FFF",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "0cd05708a3e82bfa"
            ]
        ]
    },
    {
        "id": "0cd05708a3e82bfa",
        "type": "function",
        "z": "a9c10a911df5cb3d",
        "name": "Set up output information",
        "func": "const fileRawData = msg.payload;\n\nconst fileName = \"Kettle_CAM1.fff\";\n\nmsg.fullPath = flow.get(\"OUTPUT_DIR_RUN\") + \"/\" + fileName;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "d574a45eaa654905"
            ]
        ]
    },
    {
        "id": "d574a45eaa654905",
        "type": "file",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "filename": "fullPath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "9586a1748e4c3891",
                "49906f4e4d7ba918"
            ]
        ]
    },
    {
        "id": "fc9e90afbe55f401",
        "type": "http request",
        "z": "a9c10a911df5cb3d",
        "d": true,
        "name": "CAMERA 2: GET current raw thermal image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://192.168.XXX.XXX/api/image/current?imgformat=FFF",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 360,
        "wires": [
            [
                "4684c371d3a52dae"
            ]
        ]
    },
    {
        "id": "4684c371d3a52dae",
        "type": "function",
        "z": "a9c10a911df5cb3d",
        "name": "Set up output information",
        "func": "const fileRawData = msg.payload;\n\nconst fileName = \"DS1_CAM2.fff\";\n\nmsg.fullPath = flow.get(\"OUTPUT_DIR_RUN\") + \"/\" + fileName;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "2e852024e455239d"
            ]
        ]
    },
    {
        "id": "2e852024e455239d",
        "type": "file",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "filename": "fullPath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 360,
        "wires": [
            [
                "49906f4e4d7ba918"
            ]
        ]
    },
    {
        "id": "c81573f8c9aad079",
        "type": "switch",
        "z": "a9c10a911df5cb3d",
        "name": "Check if the anomaly detection is activated",
        "property": "isDetectingAnomalies",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "0bd9dbb5f2cb9d9c",
                "fc9e90afbe55f401"
            ]
        ]
    },
    {
        "id": "7f36f35880e9c66e",
        "type": "inject",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "8ba8f8e3249db5d0",
                "2f2601877143d3d0"
            ]
        ]
    },
    {
        "id": "8e317eb32de8cfd3",
        "type": "comment",
        "z": "a9c10a911df5cb3d",
        "name": "Setup constants",
        "info": "",
        "x": 120,
        "y": 80,
        "wires": []
    },
    {
        "id": "ab187a5d73b91dcd",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isDetectingAnomalies",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 100,
        "wires": [
            [
                "8af72f0d757684f8"
            ]
        ]
    },
    {
        "id": "56039370ce9f619e",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isDetectingAnomalies",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 140,
        "wires": [
            [
                "9c78b449fdde8050"
            ]
        ]
    },
    {
        "id": "8af72f0d757684f8",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Anomaly Detection activated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1640,
        "y": 100,
        "wires": [
            [
                "c410ce1a5ce1cbea"
            ]
        ]
    },
    {
        "id": "9c78b449fdde8050",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Anomaly Detection deactivated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1640,
        "y": 140,
        "wires": [
            [
                "c410ce1a5ce1cbea"
            ]
        ]
    },
    {
        "id": "c410ce1a5ce1cbea",
        "type": "debug",
        "z": "a9c10a911df5cb3d",
        "d": true,
        "name": "debug 6",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 120,
        "wires": []
    },
    {
        "id": "69bee95463d150f0",
        "type": "switch",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0.5",
                "vt": "str"
            },
            {
                "t": "lte",
                "v": "0.5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "ab187a5d73b91dcd"
            ],
            [
                "56039370ce9f619e"
            ]
        ]
    },
    {
        "id": "41d39c09ecc60946",
        "type": "ui_switch",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "label": "Anomaly Detection",
        "tooltip": "Collect raw thermal image data",
        "group": "2f08f2424e81e171",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "69bee95463d150f0"
            ]
        ]
    },
    {
        "id": "236b4e281fe83e3c",
        "type": "function",
        "z": "a9c10a911df5cb3d",
        "name": "set outputDirectory Runtime Images",
        "func": "let outputDir = flow.get(\"OUTPUT_DIR\")\n\nflow.set(\"OUTPUT_DIR_RUN\", outputDir + \"runtime\")\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2f2601877143d3d0",
        "type": "function",
        "z": "a9c10a911df5cb3d",
        "name": "set outputDirectory",
        "func": "\n\nlet outputDir = env.get(\"SNAP_COMMON\") + \"/solutions/activeConfiguration/thermal-camera-diagnosis-app/\"\n\nflow.set(\"OUTPUT_DIR\", outputDir);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 120,
        "wires": [
            [
                "236b4e281fe83e3c"
            ]
        ]
    },
    {
        "id": "8ba8f8e3249db5d0",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "isDetectingAnomalies",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6dc0215f73fb322b",
        "type": "link in",
        "z": "a9c10a911df5cb3d",
        "name": "link in 1",
        "links": [
            "9586a1748e4c3891"
        ],
        "x": 55,
        "y": 580,
        "wires": [
            [
                "39439e546952c7a7"
            ]
        ]
    },
    {
        "id": "9586a1748e4c3891",
        "type": "link out",
        "z": "a9c10a911df5cb3d",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "6dc0215f73fb322b"
        ],
        "x": 1605,
        "y": 300,
        "wires": []
    },
    {
        "id": "39439e546952c7a7",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "runtimeImagesPath",
                "pt": "msg",
                "to": "OUTPUT_DIR_RUN",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 580,
        "wires": [
            [
                "3287fa6eea13ba89"
            ]
        ]
    },
    {
        "id": "49906f4e4d7ba918",
        "type": "debug",
        "z": "a9c10a911df5cb3d",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 320,
        "wires": []
    },
    {
        "id": "ce859409a072d61e",
        "type": "debug",
        "z": "a9c10a911df5cb3d",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 460,
        "wires": []
    },
    {
        "id": "c834d97a17758773",
        "type": "modbustcp-read",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "topic": "max-temperature/box1",
        "dataType": "HoldingRegister",
        "adr": "4141",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "server": "ed5b8ac4bcbf7c01",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "eda814eabec35acc"
            ]
        ]
    },
    {
        "id": "eda814eabec35acc",
        "type": "function",
        "z": "a9c10a911df5cb3d",
        "name": "Format data output",
        "func": "let maxTempCelsius = msg.payload[0] - 273.15;\nlet maxTempCelsiusFormatted = `${maxTempCelsius.toFixed(2)}`;\n\nmsg.payload = maxTempCelsiusFormatted;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 980,
        "wires": [
            [
                "fb4438a76c4e38d9",
                "3a7caa516031be15"
            ]
        ]
    },
    {
        "id": "f0dd57128e339dbf",
        "type": "modbustcp-read",
        "z": "a9c10a911df5cb3d",
        "d": true,
        "name": "",
        "topic": "max-temperature/box2",
        "dataType": "HoldingRegister",
        "adr": "8141",
        "quantity": "2",
        "rate": "15",
        "rateUnit": "s",
        "server": "ed5b8ac4bcbf7c01",
        "ieeeType": "single",
        "ieeeBE": "false",
        "x": 110,
        "y": 1040,
        "wires": [
            [
                "143b795882797834"
            ]
        ]
    },
    {
        "id": "143b795882797834",
        "type": "function",
        "z": "a9c10a911df5cb3d",
        "name": "Format data output",
        "func": "let maxTempCelsius = msg.payload[0] - 273.15;\nlet maxTempCelsiusFormatted = `${maxTempCelsius.toFixed(2)}`;\n\nmsg.payload = maxTempCelsiusFormatted;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "fb4438a76c4e38d9"
            ]
        ]
    },
    {
        "id": "fb4438a76c4e38d9",
        "type": "join",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 850,
        "y": 1020,
        "wires": [
            [
                "263666ece0942d7b"
            ]
        ]
    },
    {
        "id": "263666ece0942d7b",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload[\"timestamp\"]",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload[\"box1\"]",
                "pt": "msg",
                "to": "payload[\"max-temperature/box1\"]",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload[\"box2\"]",
                "pt": "msg",
                "to": "payload[\"max-temperature/box2\"]",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "max-temperatures",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1020,
        "wires": [
            [
                "f4d8c209da5ec9a1"
            ]
        ]
    },
    {
        "id": "f4d8c209da5ec9a1",
        "type": "rbe",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload[\"timestamp\"]",
        "topi": "topic",
        "x": 1230,
        "y": 1020,
        "wires": [
            [
                "c1b753fc3920229b"
            ]
        ]
    },
    {
        "id": "c1b753fc3920229b",
        "type": "switch",
        "z": "a9c10a911df5cb3d",
        "name": "Check if the anomaly detection is activated",
        "property": "isDetectingAnomalies",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1530,
        "y": 1020,
        "wires": [
            [
                "13d3225eb12e2489"
            ]
        ]
    },
    {
        "id": "13d3225eb12e2489",
        "type": "function",
        "z": "a9c10a911df5cb3d",
        "name": "function 3",
        "func": "const maxTempB1 = parseFloat(msg.payload[\"box1\"]);\nconst maxTempB2 = parseFloat(msg.payload[\"box2\"]);\n\nlet result = \"\";\n\nif (maxTempB1 > flow.get(\"box1Threshold\")){\n    result += \"Box 1 - Threshold temperature was exceeded!\\n\"\n}\n\nif (maxTempB2 > flow.get(\"box2Threshold\")){\n    result += \"Box 2 - Threshold temperature was exceeded!\\n\"\n}\n\nmsg.result = result\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 960,
        "wires": [
            [
                "6a48fbe04646159b"
            ]
        ]
    },
    {
        "id": "c6c0945ae5d83929",
        "type": "debug",
        "z": "a9c10a911df5cb3d",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 960,
        "wires": []
    },
    {
        "id": "6a48fbe04646159b",
        "type": "switch",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "property": "result.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2010,
        "y": 960,
        "wires": [
            [
                "c6c0945ae5d83929"
            ]
        ]
    },
    {
        "id": "7a4efcede826a78a",
        "type": "ui_toast",
        "z": "a9c10a911df5cb3d",
        "position": "top right",
        "displayTime": "2",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Alert the user",
        "x": 1440,
        "y": 900,
        "wires": []
    },
    {
        "id": "167e605f5310c495",
        "type": "change",
        "z": "a9c10a911df5cb3d",
        "name": "Set notification text",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CRITICAL ALERT! Electic Kettle Anomaly Detected!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 860,
        "wires": [
            [
                "7a4efcede826a78a",
                "8a9103dab50b2e0b"
            ]
        ]
    },
    {
        "id": "3a7caa516031be15",
        "type": "ui_gauge",
        "z": "a9c10a911df5cb3d",
        "name": "Box 1 Max Temperature",
        "group": "2f08f2424e81e171",
        "order": 8,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Electric Kettle Max Temperature",
        "label": "C°",
        "format": "{{value}}",
        "min": "10",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 1060,
        "wires": []
    },
    {
        "id": "8a9103dab50b2e0b",
        "type": "delay",
        "z": "a9c10a911df5cb3d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "20",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 840,
        "wires": [
            [
                "cd4f822d95d14fd3"
            ]
        ]
    },
    {
        "id": "790ad6f094e35456",
        "type": "comment",
        "z": "a9c10a911df5cb3d",
        "name": "Anomaly detection system switch ON/OFF",
        "info": "",
        "x": 1100,
        "y": 80,
        "wires": []
    },
    {
        "id": "ba26aa708042eb0a",
        "type": "comment",
        "z": "a9c10a911df5cb3d",
        "name": "Periodic image fetching functionallity",
        "info": "",
        "x": 170,
        "y": 300,
        "wires": []
    },
    {
        "id": "835a304c4c63d3c7",
        "type": "comment",
        "z": "a9c10a911df5cb3d",
        "name": "Image processing and model inference ",
        "info": "",
        "x": 420,
        "y": 540,
        "wires": []
    },
    {
        "id": "32c93106facf4df2",
        "type": "comment",
        "z": "a9c10a911df5cb3d",
        "name": "Alerting user on anomaly functionality",
        "info": "",
        "x": 940,
        "y": 820,
        "wires": []
    },
    {
        "id": "706599be23795f70",
        "type": "switch",
        "z": "a9c10a911df5cb3d",
        "name": "Check if anomaly was detected",
        "property": "anomaly",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 930,
        "y": 860,
        "wires": [
            [
                "167e605f5310c495"
            ]
        ]
    },
    {
        "id": "cd4f822d95d14fd3",
        "type": "ui_audio",
        "z": "a9c10a911df5cb3d",
        "d": true,
        "name": "TTS Alert",
        "group": "2f08f2424e81e171",
        "voice": "urn:moz-tts:sapi:Microsoft Mark - English (United States)?en-US",
        "always": true,
        "x": 1680,
        "y": 840,
        "wires": []
    }
]